{"uid":"740c38d870a82848","name":"test_Login_Login_with_Google","fullName":"tests.test_suite_demo.LoginTest#test_Login_Login_with_Google","historyId":"0c43215cb02488ae8f5707a0aac395ed","time":{"start":1660127784954,"stop":1660127918008,"duration":133054},"status":"failed","statusMessage":"AssertionError: Login with Google failed","statusTrace":"self = <tests.test_login.LoginTest testMethod=test_Login_Login_with_Google>\n\n    @allure.story('KeyCloak')  # epic/story of the test case\n    # @allure.severity(allure.severity_level.MINOR) # severity of the test case\n    # @pytestrail.case('C48') # test case if on TestRail\n    def test_Login_Login_with_Google(self):\n        self.homeNavigation = HomeNavigation(self.driver)\n        self.loginPage = LoginPage(self.driver)\n        self.loggedInPage = LoggedInPage(self.driver)\n        self.ts = TestStatus(self.driver)\n    \n        with allure.step('Waiting for homepage to completely load'):\n            self.ts.markFinal(self.page_has_loaded(), \"Homepage loaded completely\", \"Homepage not loaded completely\")\n    \n        with allure.step('Navigate to login page'):\n            self.homeNavigation.goToLoginPage()\n            self.ts.markFinal(self.loginPage.isAt, \"Navigation to login page\", \"Navigation to login page failed\")\n    \n        with allure.step('Login with Google credentials'):\n            self.loginPage.loginWithGoogle(username=td.testData(\"loginData.google.username\"), password=td.testData(\"loginData.google.password\"))\n>           self.ts.markFinal(self.loggedInPage.isAt, \"Login with Google successful\", \"Login with Google failed\")\n\ntests/test_login.py:179: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <utilities.teststatus.TestStatus object at 0x7efd36063250>\nresult = False, passResultMessage = 'Login with Google successful'\nfailResultMessage = 'Login with Google failed'\n\n    def markFinal(self, result, passResultMessage, failResultMessage):\n        \"\"\"\n        Mark the final result of the verification point in a test case\n        This needs to be called at least once in a test case\n        This should be final test status of the test case\n        \"\"\"\n        self.setResult(result, passResultMessage, failResultMessage)\n        if \"FAIL\" in self.resultList:\n            self.resultList.clear()\n>           assert False, failResultMessage\nE           AssertionError: Login with Google failed\n\nutilities/teststatus.py:55: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_unittest_setUpClass_fixture_LoginTest","time":{"start":1660127762569,"stop":1660127762570,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"setUp","time":{"start":1660127762570,"stop":1660127784950,"duration":22380},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"oneTimeSetUp","time":{"start":1660127762570,"stop":1660127762570,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: Login with Google failed","statusTrace":"self = <tests.test_login.LoginTest testMethod=test_Login_Login_with_Google>\n\n    @allure.story('KeyCloak')  # epic/story of the test case\n    # @allure.severity(allure.severity_level.MINOR) # severity of the test case\n    # @pytestrail.case('C48') # test case if on TestRail\n    def test_Login_Login_with_Google(self):\n        self.homeNavigation = HomeNavigation(self.driver)\n        self.loginPage = LoginPage(self.driver)\n        self.loggedInPage = LoggedInPage(self.driver)\n        self.ts = TestStatus(self.driver)\n    \n        with allure.step('Waiting for homepage to completely load'):\n            self.ts.markFinal(self.page_has_loaded(), \"Homepage loaded completely\", \"Homepage not loaded completely\")\n    \n        with allure.step('Navigate to login page'):\n            self.homeNavigation.goToLoginPage()\n            self.ts.markFinal(self.loginPage.isAt, \"Navigation to login page\", \"Navigation to login page failed\")\n    \n        with allure.step('Login with Google credentials'):\n            self.loginPage.loginWithGoogle(username=td.testData(\"loginData.google.username\"), password=td.testData(\"loginData.google.password\"))\n>           self.ts.markFinal(self.loggedInPage.isAt, \"Login with Google successful\", \"Login with Google failed\")\n\ntests/test_login.py:179: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <utilities.teststatus.TestStatus object at 0x7efd36063250>\nresult = False, passResultMessage = 'Login with Google successful'\nfailResultMessage = 'Login with Google failed'\n\n    def markFinal(self, result, passResultMessage, failResultMessage):\n        \"\"\"\n        Mark the final result of the verification point in a test case\n        This needs to be called at least once in a test case\n        This should be final test status of the test case\n        \"\"\"\n        self.setResult(result, passResultMessage, failResultMessage)\n        if \"FAIL\" in self.resultList:\n            self.resultList.clear()\n>           assert False, failResultMessage\nE           AssertionError: Login with Google failed\n\nutilities/teststatus.py:55: AssertionError","steps":[{"name":"Waiting for homepage to completely load","time":{"start":1660127784959,"stop":1660127795663,"duration":10704},"status":"passed","steps":[],"attachments":[{"uid":"66da4023828ce716","name":"Homepage loaded completely.1660127787863.png","source":"66da4023828ce716.png","type":"image/png","size":52402}],"parameters":[],"stepsCount":0,"attachmentsCount":1,"shouldDisplayMessage":false,"hasContent":true},{"name":"Navigate to login page","time":{"start":1660127795663,"stop":1660127835815,"duration":40152},"status":"passed","steps":[],"attachments":[{"uid":"ac2fc32b8ea259a8","name":"Navigation to login page.1660127823956.png","source":"ac2fc32b8ea259a8.png","type":"image/png","size":164992}],"parameters":[],"stepsCount":0,"attachmentsCount":1,"shouldDisplayMessage":false,"hasContent":true},{"name":"Login with Google credentials","time":{"start":1660127835835,"stop":1660127917962,"duration":82127},"status":"failed","statusMessage":"AssertionError: Login with Google failed\n","statusTrace":"  File \"/home/runner/work/FlyerrUIAutomation/FlyerrUIAutomation/tests/test_login.py\", line 179, in test_Login_Login_with_Google\n    self.ts.markFinal(self.loggedInPage.isAt, \"Login with Google successful\", \"Login with Google failed\")\n  File \"/home/runner/work/FlyerrUIAutomation/FlyerrUIAutomation/utilities/teststatus.py\", line 55, in markFinal\n    assert False, failResultMessage\n","steps":[],"attachments":[{"uid":"7f6afadb440bb39d","name":"Login with Google failed.1660127917637.png","source":"7f6afadb440bb39d.png","type":"image/png","size":52749}],"parameters":[],"stepsCount":0,"attachmentsCount":1,"shouldDisplayMessage":true,"hasContent":true}],"attachments":[{"uid":"88d8c1d59159c21b","name":"log","source":"88d8c1d59159c21b.txt","type":"text/plain","size":2708},{"uid":"b7bdb120071addca","name":"stdout","source":"b7bdb120071addca.txt","type":"text/plain","size":100},{"uid":"ab9b08776dcc2179","name":"stderr","source":"ab9b08776dcc2179.txt","type":"text/plain","size":27107}],"parameters":[],"stepsCount":3,"attachmentsCount":6,"shouldDisplayMessage":true,"hasContent":true},"afterStages":[{"name":"setUp::0","time":{"start":1660127918167,"stop":1660127918251,"duration":84},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"oneTimeSetUp::0","time":{"start":1660127918258,"stop":1660127918258,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"_unittest_setUpClass_fixture_LoginTest::0","time":{"start":1660127918259,"stop":1660127918260,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"labels":[{"name":"story","value":"KeyCloak"},{"name":"tag","value":"@pytest.mark.usefixtures('oneTimeSetUp', 'setUp')"},{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_suite_demo"},{"name":"subSuite","value":"LoginTest"},{"name":"host","value":"fv-az465-373"},{"name":"thread","value":"2353-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_suite_demo"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":3,"broken":0,"skipped":0,"passed":0,"unknown":0,"total":3},"items":[{"uid":"f110fa18eb286c0d","reportUrl":"https://suresh-chunduru.github.io/FlyerrUIAutomation/21//#testresult/f110fa18eb286c0d","status":"failed","statusDetails":"AssertionError: Login with Google failed","time":{"start":1660121426913,"stop":1660121546697,"duration":119784}},{"uid":"f81808d5d8170398","reportUrl":"https://suresh-chunduru.github.io/FlyerrUIAutomation/20//#testresult/f81808d5d8170398","status":"failed","statusDetails":"AssertionError: Login with Google failed","time":{"start":1660120885868,"stop":1660121004773,"duration":118905}}]},"tags":["@pytest.mark.usefixtures('oneTimeSetUp', 'setUp')"]},"source":"740c38d870a82848.json","parameterValues":[]}