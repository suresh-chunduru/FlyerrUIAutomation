{"uid":"6de1e07019d2f663","name":"test_Profile_Individual_Flyer_EditServices","fullName":"tests.test_suite_demo.ProfileTest#test_Profile_Individual_Flyer_EditServices","historyId":"4fe4ea476cd52d98b4eaed1d11153956","time":{"start":1660127784482,"stop":1660127839556,"duration":55074},"status":"broken","statusMessage":"selenium.common.exceptions.InvalidSessionIdException: Message: invalid session id\nStacktrace:\n#0 0x563d5cfd8403 <unknown>\n#1 0x563d5cdde64b <unknown>\n#2 0x563d5ce08a0b <unknown>\n#3 0x563d5ce3397c <unknown>\n#4 0x563d5ce31620 <unknown>\n#5 0x563d5ce30e47 <unknown>\n#6 0x563d5cdb6584 <unknown>\n#7 0x563d5cdb73e3 <unknown>\n#8 0x563d5d01fe3d <unknown>\n#9 0x563d5d022db6 <unknown>\n#10 0x563d5d00913e <unknown>\n#11 0x563d5d0239b5 <unknown>\n#12 0x563d5cffd970 <unknown>\n#13 0x563d5cdb60a5 <unknown>\n#14 0x7f1bb9fde083 <unknown>","statusTrace":"self = <tests.test_profile.ProfileTest testMethod=test_Profile_Individual_Flyer_EditServices>\n\n    @allure.story('Profile')  # epic/story of the test case\n    # @allure.severity(allure.severity_level.MINOR) # severity of the test case\n    # @pytestrail.case('C48') # test case if on TestRail\n    def test_Profile_Individual_Flyer_EditServices(self):\n        self.homeNavigation = HomeNavigation(self.driver)\n        self.loggedInNavigation = LoggedInNavigation(self.driver)\n        self.profileNavigation = ProfileNavigation(self.driver)\n        self.loginPage = LoginPage(self.driver)\n        self.loggedInPage = LoggedInPage(self.driver)\n        self.profilePage = ProfilePage(self.driver)\n        self.ts = TestStatus(self.driver)\n    \n        with allure.step('Waiting for homepage to completely load'):\n            self.ts.markFinal(self.page_has_loaded(), \"Homepage loaded completely\",\n                              \"Homepage not loaded completely\")\n    \n        with allure.step('Navigate to login page'):\n            self.homeNavigation.goToLoginPage()\n            self.ts.markFinal(self.loginPage.isAt, \"Navigation to login page\", \"Navigation to login page failed\")\n    \n        with allure.step('Login with IndividualAccount credentials'):\n>           self.loginPage.loginAndRefresh(username=td.testData(\"loginData.individual.username\"),\n                                           password=td.testData(\"loginData.individual.password\"))\n\ntests/test_profile.py:233: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npages/login_page.py:36: in loginAndRefresh\n    self.refresh()\nbase/selenium_driver.py:423: in refresh\n    self.driver.get(self.driver.current_url)\n/opt/hostedtoolcache/Python/3.10.6/x64/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py:528: in current_url\n    return self.execute(Command.GET_CURRENT_URL)['value']\n/opt/hostedtoolcache/Python/3.10.6/x64/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py:434: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7fac249685e0>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"invalid session id\",\"message\":\"invalid session id\",\"stacktrace\":\"#0 0x563...\\\\n#12 0x563d5cffd970 \\\\u003Cunknown>\\\\n#13 0x563d5cdb60a5 \\\\u003Cunknown>\\\\n#14 0x7f1bb9fde083 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, str):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response['value']\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None  # type: ignore[assignment]\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        st_value = value.get('stackTrace') or value.get('stacktrace')\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split('\\n')\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get('methodName', '<anonymous>')\n                        if 'className' in frame:\n                            meth = \"{}.{}\".format(frame['className'], meth)\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if 'data' in value:\n                alert_text = value['data'].get('text')\n            elif 'alert' in value:\n                alert_text = value['alert'].get('text')\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.InvalidSessionIdException: Message: invalid session id\nE       Stacktrace:\nE       #0 0x563d5cfd8403 <unknown>\nE       #1 0x563d5cdde64b <unknown>\nE       #2 0x563d5ce08a0b <unknown>\nE       #3 0x563d5ce3397c <unknown>\nE       #4 0x563d5ce31620 <unknown>\nE       #5 0x563d5ce30e47 <unknown>\nE       #6 0x563d5cdb6584 <unknown>\nE       #7 0x563d5cdb73e3 <unknown>\nE       #8 0x563d5d01fe3d <unknown>\nE       #9 0x563d5d022db6 <unknown>\nE       #10 0x563d5d00913e <unknown>\nE       #11 0x563d5d0239b5 <unknown>\nE       #12 0x563d5cffd970 <unknown>\nE       #13 0x563d5cdb60a5 <unknown>\nE       #14 0x7f1bb9fde083 <unknown>\n\n/opt/hostedtoolcache/Python/3.10.6/x64/lib/python3.10/site-packages/selenium/webdriver/remote/errorhandler.py:243: InvalidSessionIdException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_unittest_setUpClass_fixture_ProfileTest","time":{"start":1660127762566,"stop":1660127762566,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"oneTimeSetUp","time":{"start":1660127762566,"stop":1660127762567,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"setUp","time":{"start":1660127762567,"stop":1660127784480,"duration":21913},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"testStage":{"status":"broken","statusMessage":"selenium.common.exceptions.InvalidSessionIdException: Message: invalid session id\nStacktrace:\n#0 0x563d5cfd8403 <unknown>\n#1 0x563d5cdde64b <unknown>\n#2 0x563d5ce08a0b <unknown>\n#3 0x563d5ce3397c <unknown>\n#4 0x563d5ce31620 <unknown>\n#5 0x563d5ce30e47 <unknown>\n#6 0x563d5cdb6584 <unknown>\n#7 0x563d5cdb73e3 <unknown>\n#8 0x563d5d01fe3d <unknown>\n#9 0x563d5d022db6 <unknown>\n#10 0x563d5d00913e <unknown>\n#11 0x563d5d0239b5 <unknown>\n#12 0x563d5cffd970 <unknown>\n#13 0x563d5cdb60a5 <unknown>\n#14 0x7f1bb9fde083 <unknown>","statusTrace":"self = <tests.test_profile.ProfileTest testMethod=test_Profile_Individual_Flyer_EditServices>\n\n    @allure.story('Profile')  # epic/story of the test case\n    # @allure.severity(allure.severity_level.MINOR) # severity of the test case\n    # @pytestrail.case('C48') # test case if on TestRail\n    def test_Profile_Individual_Flyer_EditServices(self):\n        self.homeNavigation = HomeNavigation(self.driver)\n        self.loggedInNavigation = LoggedInNavigation(self.driver)\n        self.profileNavigation = ProfileNavigation(self.driver)\n        self.loginPage = LoginPage(self.driver)\n        self.loggedInPage = LoggedInPage(self.driver)\n        self.profilePage = ProfilePage(self.driver)\n        self.ts = TestStatus(self.driver)\n    \n        with allure.step('Waiting for homepage to completely load'):\n            self.ts.markFinal(self.page_has_loaded(), \"Homepage loaded completely\",\n                              \"Homepage not loaded completely\")\n    \n        with allure.step('Navigate to login page'):\n            self.homeNavigation.goToLoginPage()\n            self.ts.markFinal(self.loginPage.isAt, \"Navigation to login page\", \"Navigation to login page failed\")\n    \n        with allure.step('Login with IndividualAccount credentials'):\n>           self.loginPage.loginAndRefresh(username=td.testData(\"loginData.individual.username\"),\n                                           password=td.testData(\"loginData.individual.password\"))\n\ntests/test_profile.py:233: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npages/login_page.py:36: in loginAndRefresh\n    self.refresh()\nbase/selenium_driver.py:423: in refresh\n    self.driver.get(self.driver.current_url)\n/opt/hostedtoolcache/Python/3.10.6/x64/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py:528: in current_url\n    return self.execute(Command.GET_CURRENT_URL)['value']\n/opt/hostedtoolcache/Python/3.10.6/x64/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py:434: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7fac249685e0>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"invalid session id\",\"message\":\"invalid session id\",\"stacktrace\":\"#0 0x563...\\\\n#12 0x563d5cffd970 \\\\u003Cunknown>\\\\n#13 0x563d5cdb60a5 \\\\u003Cunknown>\\\\n#14 0x7f1bb9fde083 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, str):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response['value']\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None  # type: ignore[assignment]\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        st_value = value.get('stackTrace') or value.get('stacktrace')\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split('\\n')\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get('methodName', '<anonymous>')\n                        if 'className' in frame:\n                            meth = \"{}.{}\".format(frame['className'], meth)\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if 'data' in value:\n                alert_text = value['data'].get('text')\n            elif 'alert' in value:\n                alert_text = value['alert'].get('text')\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.InvalidSessionIdException: Message: invalid session id\nE       Stacktrace:\nE       #0 0x563d5cfd8403 <unknown>\nE       #1 0x563d5cdde64b <unknown>\nE       #2 0x563d5ce08a0b <unknown>\nE       #3 0x563d5ce3397c <unknown>\nE       #4 0x563d5ce31620 <unknown>\nE       #5 0x563d5ce30e47 <unknown>\nE       #6 0x563d5cdb6584 <unknown>\nE       #7 0x563d5cdb73e3 <unknown>\nE       #8 0x563d5d01fe3d <unknown>\nE       #9 0x563d5d022db6 <unknown>\nE       #10 0x563d5d00913e <unknown>\nE       #11 0x563d5d0239b5 <unknown>\nE       #12 0x563d5cffd970 <unknown>\nE       #13 0x563d5cdb60a5 <unknown>\nE       #14 0x7f1bb9fde083 <unknown>\n\n/opt/hostedtoolcache/Python/3.10.6/x64/lib/python3.10/site-packages/selenium/webdriver/remote/errorhandler.py:243: InvalidSessionIdException","steps":[{"name":"Waiting for homepage to completely load","time":{"start":1660127784484,"stop":1660127795651,"duration":11167},"status":"passed","steps":[],"attachments":[{"uid":"1f41a253441c107b","name":"Homepage loaded completely.1660127787370.png","source":"1f41a253441c107b.png","type":"image/png","size":52402}],"parameters":[],"stepsCount":0,"attachmentsCount":1,"shouldDisplayMessage":false,"hasContent":true},{"name":"Navigate to login page","time":{"start":1660127795651,"stop":1660127839395,"duration":43744},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"Login with IndividualAccount credentials","time":{"start":1660127839414,"stop":1660127839445,"duration":31},"status":"broken","statusMessage":"selenium.common.exceptions.InvalidSessionIdException: Message: invalid session id\nStacktrace:\n#0 0x563d5cfd8403 <unknown>\n#1 0x563d5cdde64b <unknown>\n#2 0x563d5ce08a0b <unknown>\n#3 0x563d5ce3397c <unknown>\n#4 0x563d5ce31620 <unknown>\n#5 0x563d5ce30e47 <unknown>\n#6 0x563d5cdb6584 <unknown>\n#7 0x563d5cdb73e3 <unknown>\n#8 0x563d5d01fe3d <unknown>\n#9 0x563d5d022db6 <unknown>\n#10 0x563d5d00913e <unknown>\n#11 0x563d5d0239b5 <unknown>\n#12 0x563d5cffd970 <unknown>\n#13 0x563d5cdb60a5 <unknown>\n#14 0x7f1bb9fde083 <unknown>\n\n","statusTrace":"  File \"/home/runner/work/FlyerrUIAutomation/FlyerrUIAutomation/tests/test_profile.py\", line 233, in test_Profile_Individual_Flyer_EditServices\n    self.loginPage.loginAndRefresh(username=td.testData(\"loginData.individual.username\"),\n  File \"/home/runner/work/FlyerrUIAutomation/FlyerrUIAutomation/pages/login_page.py\", line 36, in loginAndRefresh\n    self.refresh()\n  File \"/home/runner/work/FlyerrUIAutomation/FlyerrUIAutomation/base/selenium_driver.py\", line 423, in refresh\n    self.driver.get(self.driver.current_url)\n  File \"/opt/hostedtoolcache/Python/3.10.6/x64/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py\", line 528, in current_url\n    return self.execute(Command.GET_CURRENT_URL)['value']\n  File \"/opt/hostedtoolcache/Python/3.10.6/x64/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py\", line 434, in execute\n    self.error_handler.check_response(response)\n  File \"/opt/hostedtoolcache/Python/3.10.6/x64/lib/python3.10/site-packages/selenium/webdriver/remote/errorhandler.py\", line 243, in check_response\n    raise exception_class(message, screen, stacktrace)\n","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":true,"hasContent":true}],"attachments":[{"uid":"82057ed48667cfb4","name":"log","source":"82057ed48667cfb4.txt","type":"text/plain","size":1568},{"uid":"cebe9c5d92ec54e9","name":"stdout","source":"cebe9c5d92ec54e9.txt","type":"text/plain","size":100},{"uid":"6a57e5e6c92591db","name":"stderr","source":"6a57e5e6c92591db.txt","type":"text/plain","size":26861}],"parameters":[],"stepsCount":3,"attachmentsCount":4,"shouldDisplayMessage":true,"hasContent":true},"afterStages":[{"name":"setUp::0","time":{"start":1660127840448,"stop":1660127841506,"duration":1058},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"oneTimeSetUp::0","time":{"start":1660127841519,"stop":1660127841519,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"_unittest_setUpClass_fixture_ProfileTest::0","time":{"start":1660127841520,"stop":1660127841520,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"labels":[{"name":"story","value":"Profile"},{"name":"tag","value":"@pytest.mark.usefixtures('oneTimeSetUp', 'setUp')"},{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_suite_demo"},{"name":"subSuite","value":"ProfileTest"},{"name":"host","value":"fv-az465-373"},{"name":"thread","value":"2392-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_suite_demo"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":1,"skipped":0,"passed":2,"unknown":0,"total":3},"items":[{"uid":"5fedec0b145f6656","reportUrl":"https://suresh-chunduru.github.io/FlyerrUIAutomation/21//#testresult/5fedec0b145f6656","status":"passed","time":{"start":1660121427431,"stop":1660121644270,"duration":216839}},{"uid":"12a272a199f3d67f","reportUrl":"https://suresh-chunduru.github.io/FlyerrUIAutomation/20//#testresult/12a272a199f3d67f","status":"passed","time":{"start":1660120886157,"stop":1660121096329,"duration":210172}}]},"tags":["@pytest.mark.usefixtures('oneTimeSetUp', 'setUp')"]},"source":"6de1e07019d2f663.json","parameterValues":[]}