{"uid":"fff6dfb70ac058ad","name":"test_Login_Login_with_Google","fullName":"tests.test_suite_demo.LoginTest#test_Login_Login_with_Google","historyId":"0c43215cb02488ae8f5707a0aac395ed","time":{"start":1660135075810,"stop":1660135170297,"duration":94487},"status":"failed","statusMessage":"AssertionError: Login with Google failed","statusTrace":"self = <tests.test_login.LoginTest testMethod=test_Login_Login_with_Google>\n\n    @allure.story('KeyCloak')  # epic/story of the test case\n    # @allure.severity(allure.severity_level.MINOR) # severity of the test case\n    # @pytestrail.case('C48') # test case if on TestRail\n    def test_Login_Login_with_Google(self):\n        self.homeNavigation = HomeNavigation(self.driver)\n        self.loginPage = LoginPage(self.driver)\n        self.loggedInPage = LoggedInPage(self.driver)\n        self.ts = TestStatus(self.driver)\n    \n        with allure.step('Waiting for homepage to completely load'):\n            self.ts.markFinal(self.page_has_loaded(), \"Homepage loaded completely\", \"Homepage not loaded completely\")\n    \n        with allure.step('Navigate to login page'):\n            self.homeNavigation.goToLoginPage()\n            self.ts.markFinal(self.loginPage.isAt, \"Navigation to login page\", \"Navigation to login page failed\")\n    \n        with allure.step('Login with Google credentials'):\n            self.loginPage.loginWithGoogle(username=td.testData(\"loginData.google.username\"), password=td.testData(\"loginData.google.password\"))\n>           self.ts.markFinal(self.loggedInPage.isAt, \"Login with Google successful\", \"Login with Google failed\")\n\ntests/test_login.py:179: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <utilities.teststatus.TestStatus object at 0x7f6b376e0bb0>\nresult = False, passResultMessage = 'Login with Google successful'\nfailResultMessage = 'Login with Google failed'\n\n    def markFinal(self, result, passResultMessage, failResultMessage):\n        \"\"\"\n        Mark the final result of the verification point in a test case\n        This needs to be called at least once in a test case\n        This should be final test status of the test case\n        \"\"\"\n        self.setResult(result, passResultMessage, failResultMessage)\n        if \"FAIL\" in self.resultList:\n            self.resultList.clear()\n>           assert False, failResultMessage\nE           AssertionError: Login with Google failed\n\nutilities/teststatus.py:55: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"setUp","time":{"start":1660135065636,"stop":1660135075808,"duration":10172},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false},{"name":"oneTimeSetUp","time":{"start":1660135065636,"stop":1660135065636,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false},{"name":"_unittest_setUpClass_fixture_LoginTest","time":{"start":1660135065636,"stop":1660135065636,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: Login with Google failed","statusTrace":"self = <tests.test_login.LoginTest testMethod=test_Login_Login_with_Google>\n\n    @allure.story('KeyCloak')  # epic/story of the test case\n    # @allure.severity(allure.severity_level.MINOR) # severity of the test case\n    # @pytestrail.case('C48') # test case if on TestRail\n    def test_Login_Login_with_Google(self):\n        self.homeNavigation = HomeNavigation(self.driver)\n        self.loginPage = LoginPage(self.driver)\n        self.loggedInPage = LoggedInPage(self.driver)\n        self.ts = TestStatus(self.driver)\n    \n        with allure.step('Waiting for homepage to completely load'):\n            self.ts.markFinal(self.page_has_loaded(), \"Homepage loaded completely\", \"Homepage not loaded completely\")\n    \n        with allure.step('Navigate to login page'):\n            self.homeNavigation.goToLoginPage()\n            self.ts.markFinal(self.loginPage.isAt, \"Navigation to login page\", \"Navigation to login page failed\")\n    \n        with allure.step('Login with Google credentials'):\n            self.loginPage.loginWithGoogle(username=td.testData(\"loginData.google.username\"), password=td.testData(\"loginData.google.password\"))\n>           self.ts.markFinal(self.loggedInPage.isAt, \"Login with Google successful\", \"Login with Google failed\")\n\ntests/test_login.py:179: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <utilities.teststatus.TestStatus object at 0x7f6b376e0bb0>\nresult = False, passResultMessage = 'Login with Google successful'\nfailResultMessage = 'Login with Google failed'\n\n    def markFinal(self, result, passResultMessage, failResultMessage):\n        \"\"\"\n        Mark the final result of the verification point in a test case\n        This needs to be called at least once in a test case\n        This should be final test status of the test case\n        \"\"\"\n        self.setResult(result, passResultMessage, failResultMessage)\n        if \"FAIL\" in self.resultList:\n            self.resultList.clear()\n>           assert False, failResultMessage\nE           AssertionError: Login with Google failed\n\nutilities/teststatus.py:55: AssertionError","steps":[{"name":"Waiting for homepage to completely load","time":{"start":1660135075810,"stop":1660135080031,"duration":4221},"status":"passed","steps":[],"attachments":[{"uid":"4fcd0daa05cd0e53","name":"Homepage loaded completely.1660135076042.png","source":"4fcd0daa05cd0e53.png","type":"image/png","size":52402}],"parameters":[],"hasContent":true,"stepsCount":0,"attachmentsCount":1,"shouldDisplayMessage":false},{"name":"Navigate to login page","time":{"start":1660135080031,"stop":1660135092718,"duration":12687},"status":"passed","steps":[],"attachments":[{"uid":"eff8a287cd78b676","name":"Navigation to login page.1660135085897.png","source":"eff8a287cd78b676.png","type":"image/png","size":164992}],"parameters":[],"hasContent":true,"stepsCount":0,"attachmentsCount":1,"shouldDisplayMessage":false},{"name":"Login with Google credentials","time":{"start":1660135092718,"stop":1660135170296,"duration":77578},"status":"failed","statusMessage":"AssertionError: Login with Google failed\n","statusTrace":"  File \"/home/runner/work/FlyerrUIAutomation/FlyerrUIAutomation/tests/test_login.py\", line 179, in test_Login_Login_with_Google\n    self.ts.markFinal(self.loggedInPage.isAt, \"Login with Google successful\", \"Login with Google failed\")\n  File \"/home/runner/work/FlyerrUIAutomation/FlyerrUIAutomation/utilities/teststatus.py\", line 55, in markFinal\n    assert False, failResultMessage\n","steps":[],"attachments":[{"uid":"9beb110dc60c70ef","name":"Login with Google failed.1660135169847.png","source":"9beb110dc60c70ef.png","type":"image/png","size":52749}],"parameters":[],"hasContent":true,"stepsCount":0,"attachmentsCount":1,"shouldDisplayMessage":true}],"attachments":[{"uid":"a851563582f3be8c","name":"log","source":"a851563582f3be8c.txt","type":"text/plain","size":2708},{"uid":"a7ecef5d8462926b","name":"stdout","source":"a7ecef5d8462926b.txt","type":"text/plain","size":100},{"uid":"a5553c8f0e988025","name":"stderr","source":"a5553c8f0e988025.txt","type":"text/plain","size":26769}],"parameters":[],"hasContent":true,"stepsCount":3,"attachmentsCount":6,"shouldDisplayMessage":true},"afterStages":[{"name":"setUp::0","time":{"start":1660135170318,"stop":1660135170391,"duration":73},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false},{"name":"oneTimeSetUp::0","time":{"start":1660135170391,"stop":1660135170391,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false},{"name":"_unittest_setUpClass_fixture_LoginTest::0","time":{"start":1660135170392,"stop":1660135170392,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false}],"labels":[{"name":"story","value":"KeyCloak"},{"name":"tag","value":"@pytest.mark.usefixtures('oneTimeSetUp', 'setUp')"},{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_suite_demo"},{"name":"subSuite","value":"LoginTest"},{"name":"host","value":"fv-az135-755"},{"name":"thread","value":"2360-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_suite_demo"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":7,"broken":0,"skipped":0,"passed":0,"unknown":0,"total":7},"items":[{"uid":"f6998bcc8c40a140","reportUrl":"https://suresh-chunduru.github.io/FlyerrUIAutomation/25//#testresult/f6998bcc8c40a140","status":"failed","statusDetails":"AssertionError: Navigation to login page failed","time":{"start":1660132277833,"stop":1660132317008,"duration":39175}},{"uid":"b2c6c1227090de5","reportUrl":"https://suresh-chunduru.github.io/FlyerrUIAutomation/24//#testresult/b2c6c1227090de5","status":"failed","statusDetails":"AssertionError: Navigation to login page failed","time":{"start":1660132197424,"stop":1660132233670,"duration":36246}},{"uid":"a562002581324bb3","reportUrl":"https://suresh-chunduru.github.io/FlyerrUIAutomation/23//#testresult/a562002581324bb3","status":"failed","statusDetails":"AssertionError: Login with Google failed","time":{"start":1660128725911,"stop":1660128824291,"duration":98380}},{"uid":"740c38d870a82848","reportUrl":"https://suresh-chunduru.github.io/FlyerrUIAutomation/22//#testresult/740c38d870a82848","status":"failed","statusDetails":"AssertionError: Login with Google failed","time":{"start":1660127784954,"stop":1660127918008,"duration":133054}},{"uid":"f110fa18eb286c0d","reportUrl":"https://suresh-chunduru.github.io/FlyerrUIAutomation/21//#testresult/f110fa18eb286c0d","status":"failed","statusDetails":"AssertionError: Login with Google failed","time":{"start":1660121426913,"stop":1660121546697,"duration":119784}},{"uid":"f81808d5d8170398","reportUrl":"https://suresh-chunduru.github.io/FlyerrUIAutomation/20//#testresult/f81808d5d8170398","status":"failed","statusDetails":"AssertionError: Login with Google failed","time":{"start":1660120885868,"stop":1660121004773,"duration":118905}}]},"tags":["@pytest.mark.usefixtures('oneTimeSetUp', 'setUp')"]},"source":"fff6dfb70ac058ad.json","parameterValues":[]}