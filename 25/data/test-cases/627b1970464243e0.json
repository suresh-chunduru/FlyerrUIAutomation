{"uid":"627b1970464243e0","name":"test_Profile_Individual_Flyer_EditServices","fullName":"tests.test_suite_demo.ProfileTest#test_Profile_Individual_Flyer_EditServices","historyId":"4fe4ea476cd52d98b4eaed1d11153956","time":{"start":1660132323575,"stop":1660132361689,"duration":38114},"status":"failed","statusMessage":"AssertionError: Navigation to login page failed","statusTrace":"self = <tests.test_profile.ProfileTest testMethod=test_Profile_Individual_Flyer_EditServices>\n\n    @allure.story('Profile')  # epic/story of the test case\n    # @allure.severity(allure.severity_level.MINOR) # severity of the test case\n    # @pytestrail.case('C48') # test case if on TestRail\n    def test_Profile_Individual_Flyer_EditServices(self):\n        self.homeNavigation = HomeNavigation(self.driver)\n        self.loggedInNavigation = LoggedInNavigation(self.driver)\n        self.profileNavigation = ProfileNavigation(self.driver)\n        self.loginPage = LoginPage(self.driver)\n        self.loggedInPage = LoggedInPage(self.driver)\n        self.profilePage = ProfilePage(self.driver)\n        self.ts = TestStatus(self.driver)\n    \n        with allure.step('Waiting for homepage to completely load'):\n            self.ts.markFinal(self.page_has_loaded(), \"Homepage loaded completely\",\n                              \"Homepage not loaded completely\")\n    \n        with allure.step('Navigate to login page'):\n            self.homeNavigation.goToLoginPage()\n>           self.ts.markFinal(self.loginPage.isAt, \"Navigation to login page\", \"Navigation to login page failed\")\n\ntests/test_profile.py:230: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <utilities.teststatus.TestStatus object at 0x7f983e334a30>\nresult = False, passResultMessage = 'Navigation to login page'\nfailResultMessage = 'Navigation to login page failed'\n\n    def markFinal(self, result, passResultMessage, failResultMessage):\n        \"\"\"\n        Mark the final result of the verification point in a test case\n        This needs to be called at least once in a test case\n        This should be final test status of the test case\n        \"\"\"\n        self.setResult(result, passResultMessage, failResultMessage)\n        if \"FAIL\" in self.resultList:\n            self.resultList.clear()\n>           assert False, failResultMessage\nE           AssertionError: Navigation to login page failed\n\nutilities/teststatus.py:55: AssertionError","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"setUp","time":{"start":1660132317153,"stop":1660132323574,"duration":6421},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"_unittest_setUpClass_fixture_ProfileTest","time":{"start":1660132317153,"stop":1660132317153,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"oneTimeSetUp","time":{"start":1660132317153,"stop":1660132317153,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: Navigation to login page failed","statusTrace":"self = <tests.test_profile.ProfileTest testMethod=test_Profile_Individual_Flyer_EditServices>\n\n    @allure.story('Profile')  # epic/story of the test case\n    # @allure.severity(allure.severity_level.MINOR) # severity of the test case\n    # @pytestrail.case('C48') # test case if on TestRail\n    def test_Profile_Individual_Flyer_EditServices(self):\n        self.homeNavigation = HomeNavigation(self.driver)\n        self.loggedInNavigation = LoggedInNavigation(self.driver)\n        self.profileNavigation = ProfileNavigation(self.driver)\n        self.loginPage = LoginPage(self.driver)\n        self.loggedInPage = LoggedInPage(self.driver)\n        self.profilePage = ProfilePage(self.driver)\n        self.ts = TestStatus(self.driver)\n    \n        with allure.step('Waiting for homepage to completely load'):\n            self.ts.markFinal(self.page_has_loaded(), \"Homepage loaded completely\",\n                              \"Homepage not loaded completely\")\n    \n        with allure.step('Navigate to login page'):\n            self.homeNavigation.goToLoginPage()\n>           self.ts.markFinal(self.loginPage.isAt, \"Navigation to login page\", \"Navigation to login page failed\")\n\ntests/test_profile.py:230: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <utilities.teststatus.TestStatus object at 0x7f983e334a30>\nresult = False, passResultMessage = 'Navigation to login page'\nfailResultMessage = 'Navigation to login page failed'\n\n    def markFinal(self, result, passResultMessage, failResultMessage):\n        \"\"\"\n        Mark the final result of the verification point in a test case\n        This needs to be called at least once in a test case\n        This should be final test status of the test case\n        \"\"\"\n        self.setResult(result, passResultMessage, failResultMessage)\n        if \"FAIL\" in self.resultList:\n            self.resultList.clear()\n>           assert False, failResultMessage\nE           AssertionError: Navigation to login page failed\n\nutilities/teststatus.py:55: AssertionError","steps":[{"name":"Waiting for homepage to completely load","time":{"start":1660132323576,"stop":1660132328486,"duration":4910},"status":"passed","steps":[],"attachments":[{"uid":"ae143f0aec3d2c24","name":"Homepage loaded completely.1660132323594.png","source":"ae143f0aec3d2c24.png","type":"image/png","size":330703}],"parameters":[],"stepsCount":0,"attachmentsCount":1,"shouldDisplayMessage":false,"hasContent":true},{"name":"Navigate to login page","time":{"start":1660132328486,"stop":1660132361689,"duration":33203},"status":"failed","statusMessage":"AssertionError: Navigation to login page failed\n","statusTrace":"  File \"/home/runner/work/FlyerrUIAutomation/FlyerrUIAutomation/tests/test_profile.py\", line 230, in test_Profile_Individual_Flyer_EditServices\n    self.ts.markFinal(self.loginPage.isAt, \"Navigation to login page\", \"Navigation to login page failed\")\n  File \"/home/runner/work/FlyerrUIAutomation/FlyerrUIAutomation/utilities/teststatus.py\", line 55, in markFinal\n    assert False, failResultMessage\n","steps":[],"attachments":[{"uid":"40c3adaaa0a609ef","name":"Navigation to login page failed.1660132360576.png","source":"40c3adaaa0a609ef.png","type":"image/png","size":330703}],"parameters":[],"stepsCount":0,"attachmentsCount":1,"shouldDisplayMessage":true,"hasContent":true}],"attachments":[{"uid":"f58b79e6a59d492b","name":"log","source":"f58b79e6a59d492b.txt","type":"text/plain","size":992},{"uid":"20552a2f64f7c2e3","name":"stdout","source":"20552a2f64f7c2e3.txt","type":"text/plain","size":100},{"uid":"dcc876db9980321d","name":"stderr","source":"dcc876db9980321d.txt","type":"text/plain","size":6528}],"parameters":[],"stepsCount":2,"attachmentsCount":5,"shouldDisplayMessage":true,"hasContent":true},"afterStages":[{"name":"setUp::0","time":{"start":1660132361698,"stop":1660132362761,"duration":1063},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"oneTimeSetUp::0","time":{"start":1660132362761,"stop":1660132362761,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"_unittest_setUpClass_fixture_ProfileTest::0","time":{"start":1660132362762,"stop":1660132362762,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"labels":[{"name":"story","value":"Profile"},{"name":"tag","value":"@pytest.mark.usefixtures('oneTimeSetUp', 'setUp')"},{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_suite_demo"},{"name":"subSuite","value":"ProfileTest"},{"name":"host","value":"fv-az449-327"},{"name":"thread","value":"2382-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_suite_demo"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":1,"broken":1,"skipped":0,"passed":3,"unknown":0,"total":5},"items":[{"uid":"49f91b1724007d4","reportUrl":"https://suresh-chunduru.github.io/FlyerrUIAutomation/23//#testresult/49f91b1724007d4","status":"passed","time":{"start":1660128829120,"stop":1660129006781,"duration":177661}},{"uid":"6de1e07019d2f663","reportUrl":"https://suresh-chunduru.github.io/FlyerrUIAutomation/22//#testresult/6de1e07019d2f663","status":"broken","statusDetails":"selenium.common.exceptions.InvalidSessionIdException: Message: invalid session id\nStacktrace:\n#0 0x563d5cfd8403 <unknown>\n#1 0x563d5cdde64b <unknown>\n#2 0x563d5ce08a0b <unknown>\n#3 0x563d5ce3397c <unknown>\n#4 0x563d5ce31620 <unknown>\n#5 0x563d5ce30e47 <unknown>\n#6 0x563d5cdb6584 <unknown>\n#7 0x563d5cdb73e3 <unknown>\n#8 0x563d5d01fe3d <unknown>\n#9 0x563d5d022db6 <unknown>\n#10 0x563d5d00913e <unknown>\n#11 0x563d5d0239b5 <unknown>\n#12 0x563d5cffd970 <unknown>\n#13 0x563d5cdb60a5 <unknown>\n#14 0x7f1bb9fde083 <unknown>","time":{"start":1660127784482,"stop":1660127839556,"duration":55074}},{"uid":"5fedec0b145f6656","reportUrl":"https://suresh-chunduru.github.io/FlyerrUIAutomation/21//#testresult/5fedec0b145f6656","status":"passed","time":{"start":1660121427431,"stop":1660121644270,"duration":216839}},{"uid":"12a272a199f3d67f","reportUrl":"https://suresh-chunduru.github.io/FlyerrUIAutomation/20//#testresult/12a272a199f3d67f","status":"passed","time":{"start":1660120886157,"stop":1660121096329,"duration":210172}}]},"tags":["@pytest.mark.usefixtures('oneTimeSetUp', 'setUp')"]},"source":"627b1970464243e0.json","parameterValues":[]}