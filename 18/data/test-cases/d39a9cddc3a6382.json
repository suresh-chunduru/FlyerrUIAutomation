{"uid":"d39a9cddc3a6382","name":"test_Signup_CreateAccount_Individual","fullName":"tests.test_signup.SignUpTest#test_Signup_CreateAccount_Individual","historyId":"ebb0bdf8fbb636ca048ca12747939691","time":{"start":1660120262474,"stop":1660120288709,"duration":26235},"status":"failed","statusMessage":"AssertionError: Signup failed","statusTrace":"self = <tests.test_signup.SignUpTest testMethod=test_Signup_CreateAccount_Individual>\n\n    @allure.story('KeyCloak') # epic/story of the test case\n    @allure.severity(allure.severity_level.MINOR) # severity of the test case\n    # @pytestrail.case('C48') # test case if on TestRail\n    def test_Signup_CreateAccount_Individual(self):\n    \n        self.homeNavigation = HomeNavigation(self.driver)\n        self.loginNavigation = LoginNavigation(self.driver)\n        self.loginPage = LoginPage(self.driver)\n        self.loggedInPage = LoggedInPage(self.driver)\n        self.signUpPage = SignUpPage(self.driver)\n        self.emailVerificationPage = EmailVerificationPage(self.driver)\n        self.ts = TestStatus(self.driver)\n    \n        with allure.step('Waiting for homepage to completely load'):\n            self.ts.markFinal(self.page_has_loaded(), \"Homepage loaded completely\", \"Homepage not loaded completely\")\n    \n        with allure.step('Navigate to login page'):\n            self.homeNavigation.goToLoginPage()\n            self.ts.markFinal(self.loginPage.isAt, \"Navigation to login page\", \"Navigation to login page failed\")\n    \n        with allure.step('Navigate to signup page'):\n            self.loginNavigation.goToSignUpPage()\n            self.ts.markFinal(self.signUpPage.isAt, \"Navigation to signup page\", \"Navigation to signup page failed\")\n    \n        with allure.step('Sign up with details'):\n            randomValue = (random.randrange(1000, 9999, 4)).__str__()\n            self.signUpPage.signUp(firstName=td.testData(\"signUpData.individual.firstname\"),\n                                   lastName=td.testData(\"signUpData.individual.lastname\"),\n                                   email=td.testData(\"signUpData.individual.email\")+randomValue+\"@gmaill.com\",\n                                   username=td.testData(\"signUpData.individual.username\")+randomValue)\n    \n>           self.ts.markFinal(self.emailVerificationPage.isAt, \"Signup successful\", \"Signup failed\")\n\ntests/test_signup.py:118: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <utilities.teststatus.TestStatus object at 0x7feb96a48370>\nresult = False, passResultMessage = 'Signup successful'\nfailResultMessage = 'Signup failed'\n\n    def markFinal(self, result, passResultMessage, failResultMessage):\n        \"\"\"\n        Mark the final result of the verification point in a test case\n        This needs to be called at least once in a test case\n        This should be final test status of the test case\n        \"\"\"\n        self.setResult(result, passResultMessage, failResultMessage)\n        if \"FAIL\" in self.resultList:\n            self.resultList.clear()\n>           assert False, failResultMessage\nE           AssertionError: Signup failed\n\nutilities/teststatus.py:55: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_unittest_setUpClass_fixture_SignUpTest","time":{"start":1660120257562,"stop":1660120257562,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"oneTimeSetUp","time":{"start":1660120257562,"stop":1660120257563,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"setUp","time":{"start":1660120257563,"stop":1660120262472,"duration":4909},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: Signup failed","statusTrace":"self = <tests.test_signup.SignUpTest testMethod=test_Signup_CreateAccount_Individual>\n\n    @allure.story('KeyCloak') # epic/story of the test case\n    @allure.severity(allure.severity_level.MINOR) # severity of the test case\n    # @pytestrail.case('C48') # test case if on TestRail\n    def test_Signup_CreateAccount_Individual(self):\n    \n        self.homeNavigation = HomeNavigation(self.driver)\n        self.loginNavigation = LoginNavigation(self.driver)\n        self.loginPage = LoginPage(self.driver)\n        self.loggedInPage = LoggedInPage(self.driver)\n        self.signUpPage = SignUpPage(self.driver)\n        self.emailVerificationPage = EmailVerificationPage(self.driver)\n        self.ts = TestStatus(self.driver)\n    \n        with allure.step('Waiting for homepage to completely load'):\n            self.ts.markFinal(self.page_has_loaded(), \"Homepage loaded completely\", \"Homepage not loaded completely\")\n    \n        with allure.step('Navigate to login page'):\n            self.homeNavigation.goToLoginPage()\n            self.ts.markFinal(self.loginPage.isAt, \"Navigation to login page\", \"Navigation to login page failed\")\n    \n        with allure.step('Navigate to signup page'):\n            self.loginNavigation.goToSignUpPage()\n            self.ts.markFinal(self.signUpPage.isAt, \"Navigation to signup page\", \"Navigation to signup page failed\")\n    \n        with allure.step('Sign up with details'):\n            randomValue = (random.randrange(1000, 9999, 4)).__str__()\n            self.signUpPage.signUp(firstName=td.testData(\"signUpData.individual.firstname\"),\n                                   lastName=td.testData(\"signUpData.individual.lastname\"),\n                                   email=td.testData(\"signUpData.individual.email\")+randomValue+\"@gmaill.com\",\n                                   username=td.testData(\"signUpData.individual.username\")+randomValue)\n    \n>           self.ts.markFinal(self.emailVerificationPage.isAt, \"Signup successful\", \"Signup failed\")\n\ntests/test_signup.py:118: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <utilities.teststatus.TestStatus object at 0x7feb96a48370>\nresult = False, passResultMessage = 'Signup successful'\nfailResultMessage = 'Signup failed'\n\n    def markFinal(self, result, passResultMessage, failResultMessage):\n        \"\"\"\n        Mark the final result of the verification point in a test case\n        This needs to be called at least once in a test case\n        This should be final test status of the test case\n        \"\"\"\n        self.setResult(result, passResultMessage, failResultMessage)\n        if \"FAIL\" in self.resultList:\n            self.resultList.clear()\n>           assert False, failResultMessage\nE           AssertionError: Signup failed\n\nutilities/teststatus.py:55: AssertionError","steps":[{"name":"Waiting for homepage to completely load","time":{"start":1660120262476,"stop":1660120263313,"duration":837},"status":"passed","steps":[],"attachments":[{"uid":"3f5e171dbccd6511","name":"Homepage loaded completely.1660120262483.png","source":"3f5e171dbccd6511.png","type":"image/png","size":21121}],"parameters":[],"stepsCount":0,"attachmentsCount":1,"shouldDisplayMessage":false,"hasContent":true},{"name":"Navigate to login page","time":{"start":1660120263313,"stop":1660120269135,"duration":5822},"status":"passed","steps":[],"attachments":[{"uid":"44658e0ab3134290","name":"Navigation to login page.1660120268469.png","source":"44658e0ab3134290.png","type":"image/png","size":164992}],"parameters":[],"stepsCount":0,"attachmentsCount":1,"shouldDisplayMessage":false,"hasContent":true},{"name":"Navigate to signup page","time":{"start":1660120269135,"stop":1660120272683,"duration":3548},"status":"passed","steps":[],"attachments":[{"uid":"867e11cfce3d1200","name":"Navigation to signup page.1660120272061.png","source":"867e11cfce3d1200.png","type":"image/png","size":161862}],"parameters":[],"stepsCount":0,"attachmentsCount":1,"shouldDisplayMessage":false,"hasContent":true},{"name":"Sign up with details","time":{"start":1660120272683,"stop":1660120288709,"duration":16026},"status":"failed","statusMessage":"AssertionError: Signup failed\n","statusTrace":"  File \"/home/runner/work/FlyerrUIAutomation/FlyerrUIAutomation/tests/test_signup.py\", line 118, in test_Signup_CreateAccount_Individual\n    self.ts.markFinal(self.emailVerificationPage.isAt, \"Signup successful\", \"Signup failed\")\n  File \"/home/runner/work/FlyerrUIAutomation/FlyerrUIAutomation/utilities/teststatus.py\", line 55, in markFinal\n    assert False, failResultMessage\n","steps":[],"attachments":[{"uid":"df00dfe2d012820e","name":"Signup failed.1660120288346.png","source":"df00dfe2d012820e.png","type":"image/png","size":163442}],"parameters":[],"stepsCount":0,"attachmentsCount":1,"shouldDisplayMessage":true,"hasContent":true}],"attachments":[{"uid":"ecfe1597ec59c422","name":"log","source":"ecfe1597ec59c422.txt","type":"text/plain","size":3133},{"uid":"8b13d1d01440a57e","name":"stdout","source":"8b13d1d01440a57e.txt","type":"text/plain","size":100},{"uid":"33858c80e764bdc8","name":"stderr","source":"33858c80e764bdc8.txt","type":"text/plain","size":160}],"parameters":[],"stepsCount":4,"attachmentsCount":7,"shouldDisplayMessage":true,"hasContent":true},"afterStages":[{"name":"setUp::0","time":{"start":1660120288721,"stop":1660120288782,"duration":61},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"_unittest_setUpClass_fixture_SignUpTest::0","time":{"start":1660120288782,"stop":1660120288782,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"oneTimeSetUp::0","time":{"start":1660120288782,"stop":1660120288782,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"labels":[{"name":"story","value":"KeyCloak"},{"name":"severity","value":"minor"},{"name":"tag","value":"@pytest.mark.usefixtures('oneTimeSetUp', 'setUp')"},{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_signup"},{"name":"subSuite","value":"SignUpTest"},{"name":"host","value":"fv-az208-434"},{"name":"thread","value":"2343-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_signup"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"minor","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"tags":["@pytest.mark.usefixtures('oneTimeSetUp', 'setUp')"]},"source":"d39a9cddc3a6382.json","parameterValues":[]}