{"uid":"4554c0d09cd7da0","name":"test_Login_Login_with_IndividualAccount","fullName":"tests.test_suite_demo.LoginTest#test_Login_Login_with_IndividualAccount","historyId":"e6c877c03bdafb564ee1e8017f23bad2","time":{"start":1660132197283,"stop":1660132233901,"duration":36618},"status":"failed","statusMessage":"AssertionError: Navigation to login page failed","statusTrace":"self = <tests.test_login.LoginTest testMethod=test_Login_Login_with_IndividualAccount>\n\n    @allure.story('KeyCloak')  # epic/story of the test case\n    # @allure.severity(allure.severity_level.MINOR) # severity of the test case\n    # @pytestrail.case('C48') # test case if on TestRail\n    def test_Login_Login_with_IndividualAccount(self):\n    \n        self.homeNavigation = HomeNavigation(self.driver)\n        self.loginPage = LoginPage(self.driver)\n        self.loggedInPage = LoggedInPage(self.driver)\n        self.ts = TestStatus(self.driver)\n    \n        with allure.step('Waiting for homepage to completely load'):\n            self.ts.markFinal(self.page_has_loaded(), \"Homepage loaded completely\", \"Homepage not loaded completely\")\n    \n        with allure.step('Navigate to login page'):\n            self.homeNavigation.goToLoginPage()\n>           self.ts.markFinal(self.loginPage.isAt, \"Navigation to login page\", \"Navigation to login page failed\")\n\ntests/test_login.py:109: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <utilities.teststatus.TestStatus object at 0x7f114439c610>\nresult = False, passResultMessage = 'Navigation to login page'\nfailResultMessage = 'Navigation to login page failed'\n\n    def markFinal(self, result, passResultMessage, failResultMessage):\n        \"\"\"\n        Mark the final result of the verification point in a test case\n        This needs to be called at least once in a test case\n        This should be final test status of the test case\n        \"\"\"\n        self.setResult(result, passResultMessage, failResultMessage)\n        if \"FAIL\" in self.resultList:\n            self.resultList.clear()\n>           assert False, failResultMessage\nE           AssertionError: Navigation to login page failed\n\nutilities/teststatus.py:55: AssertionError","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"setUp","time":{"start":1660132185167,"stop":1660132197282,"duration":12115},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"oneTimeSetUp","time":{"start":1660132185167,"stop":1660132185167,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"_unittest_setUpClass_fixture_LoginTest","time":{"start":1660132185167,"stop":1660132185167,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: Navigation to login page failed","statusTrace":"self = <tests.test_login.LoginTest testMethod=test_Login_Login_with_IndividualAccount>\n\n    @allure.story('KeyCloak')  # epic/story of the test case\n    # @allure.severity(allure.severity_level.MINOR) # severity of the test case\n    # @pytestrail.case('C48') # test case if on TestRail\n    def test_Login_Login_with_IndividualAccount(self):\n    \n        self.homeNavigation = HomeNavigation(self.driver)\n        self.loginPage = LoginPage(self.driver)\n        self.loggedInPage = LoggedInPage(self.driver)\n        self.ts = TestStatus(self.driver)\n    \n        with allure.step('Waiting for homepage to completely load'):\n            self.ts.markFinal(self.page_has_loaded(), \"Homepage loaded completely\", \"Homepage not loaded completely\")\n    \n        with allure.step('Navigate to login page'):\n            self.homeNavigation.goToLoginPage()\n>           self.ts.markFinal(self.loginPage.isAt, \"Navigation to login page\", \"Navigation to login page failed\")\n\ntests/test_login.py:109: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <utilities.teststatus.TestStatus object at 0x7f114439c610>\nresult = False, passResultMessage = 'Navigation to login page'\nfailResultMessage = 'Navigation to login page failed'\n\n    def markFinal(self, result, passResultMessage, failResultMessage):\n        \"\"\"\n        Mark the final result of the verification point in a test case\n        This needs to be called at least once in a test case\n        This should be final test status of the test case\n        \"\"\"\n        self.setResult(result, passResultMessage, failResultMessage)\n        if \"FAIL\" in self.resultList:\n            self.resultList.clear()\n>           assert False, failResultMessage\nE           AssertionError: Navigation to login page failed\n\nutilities/teststatus.py:55: AssertionError","steps":[{"name":"Waiting for homepage to completely load","time":{"start":1660132197283,"stop":1660132199810,"duration":2527},"status":"passed","steps":[],"attachments":[{"uid":"44a100f0a54ff002","name":"Homepage loaded completely.1660132197297.png","source":"44a100f0a54ff002.png","type":"image/png","size":40707}],"parameters":[],"stepsCount":0,"attachmentsCount":1,"shouldDisplayMessage":false,"hasContent":true},{"name":"Navigate to login page","time":{"start":1660132199810,"stop":1660132233901,"duration":34091},"status":"failed","statusMessage":"AssertionError: Navigation to login page failed\n","statusTrace":"  File \"/home/runner/work/FlyerrUIAutomation/FlyerrUIAutomation/tests/test_login.py\", line 109, in test_Login_Login_with_IndividualAccount\n    self.ts.markFinal(self.loginPage.isAt, \"Navigation to login page\", \"Navigation to login page failed\")\n  File \"/home/runner/work/FlyerrUIAutomation/FlyerrUIAutomation/utilities/teststatus.py\", line 55, in markFinal\n    assert False, failResultMessage\n","steps":[],"attachments":[{"uid":"6cc818408e913d9d","name":"Navigation to login page failed.1660132231910.png","source":"6cc818408e913d9d.png","type":"image/png","size":330703}],"parameters":[],"stepsCount":0,"attachmentsCount":1,"shouldDisplayMessage":true,"hasContent":true}],"attachments":[{"uid":"3628d2250ecd5b7b","name":"log","source":"3628d2250ecd5b7b.txt","type":"text/plain","size":992},{"uid":"ac96acd778d47a9a","name":"stdout","source":"ac96acd778d47a9a.txt","type":"text/plain","size":100},{"uid":"61258d3f15827db4","name":"stderr","source":"61258d3f15827db4.txt","type":"text/plain","size":6842}],"parameters":[],"stepsCount":2,"attachmentsCount":5,"shouldDisplayMessage":true,"hasContent":true},"afterStages":[{"name":"setUp::0","time":{"start":1660132233958,"stop":1660132234033,"duration":75},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"oneTimeSetUp::0","time":{"start":1660132234034,"stop":1660132234034,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"_unittest_setUpClass_fixture_LoginTest::0","time":{"start":1660132234034,"stop":1660132234034,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"labels":[{"name":"story","value":"KeyCloak"},{"name":"tag","value":"@pytest.mark.usefixtures('oneTimeSetUp', 'setUp')"},{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_suite_demo"},{"name":"subSuite","value":"LoginTest"},{"name":"host","value":"fv-az462-115"},{"name":"thread","value":"2305-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_suite_demo"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":1,"broken":0,"skipped":0,"passed":4,"unknown":0,"total":5},"items":[{"uid":"99856c8b8861c74a","reportUrl":"https://suresh-chunduru.github.io/FlyerrUIAutomation/23//#testresult/99856c8b8861c74a","status":"passed","time":{"start":1660128726486,"stop":1660128759983,"duration":33497}},{"uid":"2cc02f19a7fc2614","reportUrl":"https://suresh-chunduru.github.io/FlyerrUIAutomation/22//#testresult/2cc02f19a7fc2614","status":"passed","time":{"start":1660127786349,"stop":1660127850380,"duration":64031}},{"uid":"8aa6a7927dba09cf","reportUrl":"https://suresh-chunduru.github.io/FlyerrUIAutomation/21//#testresult/8aa6a7927dba09cf","status":"passed","time":{"start":1660121430008,"stop":1660121480141,"duration":50133}},{"uid":"9d3deb6cea4ecfca","reportUrl":"https://suresh-chunduru.github.io/FlyerrUIAutomation/20//#testresult/9d3deb6cea4ecfca","status":"passed","time":{"start":1660120886829,"stop":1660120940354,"duration":53525}}]},"tags":["@pytest.mark.usefixtures('oneTimeSetUp', 'setUp')"]},"source":"4554c0d09cd7da0.json","parameterValues":[]}